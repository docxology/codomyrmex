# Cursor Rules for the build_synthesis Module

## 0. Preamble
These rules are specific to the `build_synthesis` module and supplement `general.cursorrules`. Always adhere to `general.cursorrules` unless explicitly overridden here for a specific reason pertinent to this module.

## 1. Module Purpose & Context
-   **Core Functionality**: Manages build processes and AI-powered code generation/synthesis. It aims to automate and standardize how various project components are built and how AI can assist in generating boilerplate or synthesized code.
-   **Key Technologies/Tools**: Build systems (e.g., Make, Docker, Webpack, pip build), code generation tools, Python.
-   Refer to the module's main `README.md` (located at `../../build_synthesis/README.md`) for a comprehensive overview.

## 2. Key Files & Structure in `build_synthesis` Module
When working within this module, pay close attention to:
-   `README.md`: Overview of build synthesis capabilities.
-   `API_SPECIFICATION.md`: APIs for triggering builds or code synthesis tasks.
-   `MCP_TOOL_SPECIFICATION.md`: MCP tools for build/synthesis automation.
-   `CHANGELOG.md`: Changes to build processes or synthesis tools.
-   `SECURITY.md`: Security of build scripts and generated code.
-   `requirements.txt`: Dependencies for the build synthesis tools themselves.
-   `docs/`: Detailed documentation on build targets, synthesis strategies.
-   `src/` (or equivalent): Core logic for orchestrating builds and code generation.
-   `tests/`: Tests for build scripts and synthesis logic.

## 3. Coding Standards & Practices for `build_synthesis`
-   **Build Script Clarity**: Build scripts (Makefiles, Dockerfiles, etc.) managed or generated by this module should be clear, well-commented, and robust.
-   **Idempotency**: Build and synthesis processes should be as idempotent as possible.
-   **Code Generation**: AI-generated code should be clearly marked. Mechanisms for reviewing and testing synthesized code are important.
-   **Configuration**: Build configurations should be externalized and manageable.

## 4. Testing in `build_synthesis`
-   Test various build targets and configurations.
-   For code synthesis, test the quality and correctness of generated code.
-   Ensure that builds are reproducible. Refer to `build_synthesis/tests/README.md`.

## 5. Documentation for `build_synthesis`
-   Document available build targets, their parameters, and expected outputs.
-   Document any AI code synthesis capabilities, including prompts or configurations used.

## 6. Specific Considerations for `build_synthesis`
-   **Security of Builds**: Pay close attention to the security implications of executed build scripts and fetched dependencies (see `SECURITY.md`).
-   **Artifact Management**: Define how build artifacts are stored, versioned, and accessed.
-   **Extensibility**: Design the system to easily support new build tools or code synthesis strategies.

## 7. Final Check for `build_synthesis`
-   Ensure build processes are reliable and produce the expected artifacts.
-   Verify that any code synthesis features are working correctly.
-   Update all relevant documentation and changelogs. 