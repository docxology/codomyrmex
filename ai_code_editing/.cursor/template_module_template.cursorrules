# Cursor Rules for the Module Template

## 0. Preamble
These rules are specific to the `template/module_template/` directory and supplement `general.cursorrules` and `template_module.cursorrules`. This directory provides a skeletal structure for creating new functional modules within the Codomyrmex project.

## 1. Purpose of the Module Template
-   **Core Goal**: To provide a standardized, best-practice starting point for new modules, ensuring consistency in structure, essential files, and basic configurations across the project.
-   **Key Components**: Includes placeholders for module name, pre-defined subdirectories (`src/`, `tests/`, `docs/`), essential files (`README.md`, `API_SPECIFICATION.md`, `MCP_TOOL_SPECIFICATION.md`, `CHANGELOG.md`, `SECURITY.md`, `requirements.txt`, `.gitignore`), and example test/doc structures.

## 2. Using the Module Template
1.  **Instantiation**: Typically, you would copy the entire `template/module_template/` directory to a new top-level directory in the project, renaming it to your new module's name (e.g., `my_new_module`).
2.  **Placeholder Replacement**: Carefully search and replace all placeholders throughout the copied template. Common placeholders might include:
    -   `__MODULE_NAME__`
    -   `__MODULE_DESCRIPTION__`
    -   `__YOUR_NAME_OR_TEAM__` (for authorship)
    -   `__PYTHON_VERSION__` (if applicable)
    -   Placeholder comments like `# TODO: Implement module-specific logic here`
3.  **Automation**: Check if any scripts are provided within `template/module_template/scripts/` or `build_synthesis` to help automate renaming and placeholder replacement. If not, this is a manual process.
4.  **Initial Configuration**: Update `requirements.txt` with initial dependencies. Configure linters or other tools if specific project files (e.g., `pylintrc`) are part of the template.
5.  **Flesh out Content**: Populate the `README.md`, `docs/`, `src/`, and `tests/` with actual content relevant to the new module.

## 3. Key Files & Structure within `template/module_template/`
-   `README.md`: Template for the new module's main README. Should guide users on its purpose, setup, and usage.
-   `API_SPECIFICATION.md`: Template for defining the module's API. Contains standard sections.
-   `MCP_TOOL_SPECIFICATION.md`: Template for defining MCP tools exposed by the module.
-   `CHANGELOG.md`: Standard changelog format.
-   `SECURITY.md`: Template for outlining module-specific security considerations.
-   `requirements.txt` (or language equivalent): For listing dependencies.
-   `.gitignore`: Basic gitignore rules, may need customization.
-   `src/` (or e.g., `python_module_name/`): Placeholder for primary source code.
    -   `__init__.py` (if Python): Basic package initializer.
-   `tests/`: Placeholder for tests.
    -   `README.md`: How to run tests for this module.
    -   `unit/`, `integration/`: Standard subdirectories for tests.
    -   Example test files.
-   `docs/`: Placeholder for detailed documentation.
    -   `README.md` or `index.md`: Entry point for module documentation within Docusaurus.
    -   `tutorials/`: For how-to guides.

## 4. Modifying the Module Template Itself
-   Changes to `template/module_template/` should be made if project-wide standards for new modules evolve (e.g., a new mandatory file, a change in recommended directory structure, updates to boilerplate in `API_SPECIFICATION.md`).
-   Such changes should be discussed, agreed upon, and then implemented carefully in the template.
-   The `CHANGELOG.md` within `template/module_template/` (or a project-level one) should reflect changes to the template itself.

## 5. AI Interaction with the Module Template
-   **Instantiation Assistance**: You can ask the AI to help copy the template, rename files/directories, and perform initial placeholder replacements.
-   **Boilerplate Generation**: After initial setup, AI can help generate boilerplate code within the `src/` directory or draft initial content for `README.md` and other documentation files, based on your high-level description of the new module.
-   **Test Generation**: AI can assist in creating initial unit or integration tests based on the function signatures or API specs you define.

## 6. Final Check when working with `template/module_template/`
-   **Completeness**: Ensure all necessary standard files and directories are present in the template.
-   **Clarity of Placeholders**: Placeholders should be obvious and easy to find/replace.
-   **Documentation**: The `README.md` within `template/module_template/` should clearly explain how to use this template to bootstrap a new module.

This template is crucial for maintaining project consistency. Treat modifications to it with care. 