# Cursor Rules for the pattern_matching Module

## 0. Preamble
These rules are specific to the `pattern_matching` module and supplement `general.cursorrules`. Always adhere to `general.cursorrules` unless explicitly overridden here.

## 1. Module Purpose & Context
-   **Core Functionality**: Enables advanced pattern matching capabilities, potentially type-safe, within the codebase (e.g., for complex data structures, AST manipulation, or AI-driven code analysis). The `run_codomyrmex_analysis.py` script suggests a focus on codebase analysis and generating reports.
-   **Key Technologies/Tools**: Python (evident from `run_codomyrmex_analysis.py`), libraries for pattern matching (e.g., `match` statement in Python 3.10+, `ts-pattern` if TypeScript were used, or custom logic), AST manipulation libraries.
-   Refer to this module's main `README.md` (located at `../../pattern_matching/README.md`) for specific capabilities and usage.

## 2. Key Files & Structure in `pattern_matching` Module
When working within this module, pay close attention to:
-   `README.md`: Overview of pattern matching features and use cases.
-   `run_codomyrmex_analysis.py`: Core script for performing analysis, likely using pattern matching.
-   `API_SPECIFICATION.md`: If pattern matching is exposed as a service.
-   `MCP_TOOL_SPECIFICATION.md`: If MCP tools are provided for pattern-based queries or transformations.
-   `docs/`: Detailed documentation on pattern syntax, supported patterns, and examples.
-   `src/` (or Python files like `run_codomyrmex_analysis.py`): Implementation of pattern matching logic and analysis routines.
-   `tests/`: Tests for various patterns and their matching against different code structures or data.

## 3. Coding Standards & Practices for `pattern_matching`
-   **Pattern Clarity**: Patterns should be expressive and as easy to understand as possible.
-   **Exhaustiveness**: If applicable (like in type-safe matching), consider exhaustiveness of patterns or provide clear default/fallback behavior.
-   **Performance**: Be mindful of the performance implications of complex patterns, especially when applied to large codebases or datasets.
-   **Integration**: Patterns might be used to analyze code structures from `static_analysis` or to identify refactoring opportunities for `ai_code_editing`.

## 4. Testing in `pattern_matching`
-   Test a wide variety of patterns against diverse input data or code structures.
-   Include tests for edge cases and non-matching scenarios.
-   Verify the correctness of data extraction or transformations based on matched patterns.
-   Refer to `pattern_matching/tests/README.md`.

## 5. Documentation for `pattern_matching`
-   Clearly document the syntax and semantics of supported patterns.
-   Provide examples of how to define and use patterns for common tasks (e.g., finding specific code constructs, analyzing data).
-   Explain how the output of `run_codomyrmex_analysis.py` (stored in `output/`) should be interpreted.

## 6. Specific Considerations for `pattern_matching`
-   **Code Analysis Focus**: Given `run_codomyrmex_analysis.py`, a primary use is likely codebase analysis. Patterns should be tailored for identifying code smells, specific structures, or gathering metrics.
-   **Output Interpretation**: The analysis results (e.g., in `output/codomyrmex_analysis/pattern_matching_review/`) need clear documentation for users to understand the findings.
-   **Extensibility**: Design the system to allow for new patterns or matching strategies to be added easily.

## 7. Final Check for `pattern_matching`
-   Ensure defined patterns are accurate and achieve their intended matching logic.
-   Verify that analysis scripts like `run_codomyrmex_analysis.py` run correctly and produce meaningful output.
-   Confirm that documentation clearly explains how to use the pattern matching features and interpret results. 