# Cursor Rules for the output Module

## 0. Preamble
These rules are specific to the `output` directory/module and supplement `general.cursorrules`. Always adhere to `general.cursorrules` unless explicitly overridden here.

## 1. Module Purpose & Context
-   **Core Functionality**: This directory serves as the designated location for various generated outputs from other Codomyrmex modules. This includes analysis reports, code summaries, indexed data, build artifacts (if not stored elsewhere), etc.
-   **Key Technologies/Tools**: The content within this directory is diverse, reflecting the outputs of different modules (e.g., JSON, XML, text files, compiled binaries, data files).
-   There isn't a central `README.md` for the `output` module itself, as its structure is defined by the modules that write to it. Refer to individual subdirectories like `output/codomyrmex_analysis/` for more specific context.

## 2. Key Files & Structure in the `output` Module
-   The structure of this directory is dynamic and determined by the modules that generate output within it (e.g., `output/codomyrmex_analysis/[module_name]_review/`).
-   `.gitignore` at the project root or within `output/` itself should be configured to ignore most, if not all, contents of this directory, as they are typically generated artifacts.
-   When AI is asked to *analyze* content within this directory, understanding the source module and the nature of the generated files is crucial.

## 3. Interaction Standards & Practices for the `output` Module
-   **Writing to `output/`**: Modules writing to this directory should:
    -   Create clear, well-named subdirectories to avoid conflicts (e.g., `output/[source_module_name]/[specific_task_output]/`).
    -   Document the format and meaning of their output files within their own module documentation.
-   **Reading from `output/`**: When reading or analyzing files from this directory:
    -   Identify the source module that generated the data.
    -   Consult that source module's documentation to understand the data format and structure.
-   **No Manual Edits**: Generally, files within `output/` should be treated as build/process artifacts and NOT be manually edited directly. Changes should be made by re-running the generating module/process.
-   **Cleaning Output**: Mechanisms or scripts (potentially in `build_synthesis` or module-specific Makefiles) should exist to clean parts or all of the `output/` directory.

## 4. Testing Considerations for `output`
-   Modules that write to `output/` should have tests that verify the correctness and format of their generated output files.
-   Tests that consume output from this directory should be robust to changes in output format (ideally by consuming versioned or schematized output).

## 5. Documentation related to `output`
-   Each module that generates files in `output/` is responsible for documenting its own output structure and format within its own `docs/` or `README.md`.
-   The main project `README.md` or a dedicated developer guide might briefly mention the purpose of the `output/` directory.

## 6. Specific Considerations for the `output` Module
-   **Git Ignore**: Ensure `.gitignore` effectively prevents generated output from being committed to version control unless specifically intended (e.g., sample outputs for documentation).
-   **Data Volume**: Be mindful of the potential volume of data generated in `output/`. Implement cleanup strategies if necessary.
-   **Inter-module Dependencies**: If one module consumes output generated by another, this dependency should be clearly documented and managed (e.g., ensuring the producer module runs before the consumer).

## 7. Final Check when dealing with the `output` Module
-   When generating output, ensure it's placed in a unique and descriptive path.
-   When consuming output, ensure you understand its source and format.
-   Confirm that `.gitignore` rules are appropriate for the files being generated or interacted with. 