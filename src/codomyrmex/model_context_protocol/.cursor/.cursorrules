# Cursor Rules for the model_context_protocol Module

## 0. Preamble
These rules are specific to the `model_context_protocol` module and supplement the root `../../.cursor/.cursorrules` file. Always adhere to the root rules unless explicitly overridden here for a specific reason pertinent to this module.

## 1. Module Purpose & Context
-   **Core Functionality**: Defines the Model Context Protocol (MCP), a standardized communication interface for AI agents and tools within the Codomyrmex ecosystem. This module provides the meta-specification for tool definitions, core message schemas, and guidelines for protocol usage.
-   **Key Technologies/Tools**: Markdown (for specifications), JSON Schema (for message and tool schema definitions), Python (for potential validation utilities or reference implementations).
-   Refer to this module's `README.md` and `docs/technical_overview.md` for a comprehensive overview.

## 2. Key Files & Structure
When working within this module, pay close attention to:
-   `README.md`: High-level overview of MCP, its purpose, and guidance for developers.
-   `MCP_TOOL_SPECIFICATION.md`: This is the **meta-specification** that dictates how other modules define their tools. It is a critical document.
-   `docs/technical_overview.md`: Detailed explanation of MCP message structures, schemas, versioning, and design rationale.
-   `docs/tutorials/`: Tutorials on implementing and consuming MCP-compliant tools.
-   `USAGE_EXAMPLES.md`: Concrete examples of tool specifications and MCP messages.
-   `SECURITY.md`: Specific security considerations for implementing and using MCP.
-   `CHANGELOG.md`: All notable changes to the MCP specification or this module must be logged here.
-   `requirements.txt`: Dependencies for this module (e.g., `jsonschema` for validation utilities).
-   `src/` or primary source code files (if any, e.g., for validation utilities or Python data models for MCP messages).
-   `tests/`: Unit and integration tests for any provided utilities or validation logic.

## 3. Coding Standards & Practices (for any utilities/code in this module)
-   **Consistency**: Adhere strictly to the existing coding style, naming conventions, and architectural patterns if developing utilities within this module.
-   **Language Specifics (Python)**: If Python code is added (e.g., for Pydantic models or validators):
    -   Follow PEP 8 guidelines.
    -   Use type hinting extensively.
    -   Ensure code is well-documented with docstrings.
-   **Dependencies**:
    -   Any new dependencies must be justified, added to `requirements.txt` with pinned versions, and should ideally be for widely-used, well-maintained libraries.
    -   Prefer to use dependencies already available in the project if suitable.
-   **Error Handling**: Implement robust error handling in any utility functions. Log errors using the `logging_monitoring` module if appropriate.

## 4. Testing (for any utilities/code in this module)
-   New features, utilities, or bug fixes MUST be accompanied by corresponding tests in `tests/unit/` and/or `tests/integration/`.
-   Tests should cover schema validation, correct parsing of MCP messages, and any other logic provided by this module.
-   Run existing tests to ensure no regressions are introduced. Refer to `tests/README.md`.

## 5. Documentation & Specification Integrity
-   The MCP specifications (`README.md`, `MCP_TOOL_SPECIFICATION.md`, `docs/technical_overview.md`) are the primary output of this module. They must be exceptionally clear, consistent, and accurate.
-   All changes to the protocol or its specification must be meticulously documented and reflected in the `CHANGELOG.md`.
-   Ensure that `USAGE_EXAMPLES.md` remains consistent with the specifications.
-   Keep code comments in any utility files clear and concise.

## 6. Specific Considerations for `model_context_protocol`
-   **Meta-Specification Focus**: The primary role of this module is to define a protocol and how other modules should adhere to it. Clarity and precision in the specification documents are paramount.
-   **Stability**: Changes to the core MCP specification should be made cautiously, with careful consideration for backward compatibility and impact on other modules. Versioning is critical.
-   **No Direct Tools (Usually)**: This module typically does not define its own end-user tools in the same way other modules do. Its `MCP_TOOL_SPECIFICATION.md` is a *meta-specification*. If tools are added (e.g., an MCP validator tool), they are meta-tools about the protocol itself.

## 7. Final Check for `model_context_protocol`
-   Before finalizing changes, ensure all specification documents are consistent and accurately reflect the intended protocol behavior.
-   Verify that the `CHANGELOG.md` is updated with all significant changes.
-   If code/utilities are present, verify that all tests pass and documentation (docstrings, `README.md`) is updated. 