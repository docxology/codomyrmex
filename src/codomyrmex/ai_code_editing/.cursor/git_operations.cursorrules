# Cursor Rules for the git_operations Module

## 0. Preamble
These rules are specific to the `git_operations` module and supplement `general.cursorrules`. Always adhere to `general.cursorrules` unless explicitly overridden here.

## 1. Module Purpose & Context
-   **Core Functionality**: Houses scripts, configurations (like `.gitattributes`, `.gitignore` templates/references if not module-specific), and documentation related to Git workflows, branching strategies, commit conventions, and repository management for the Codomyrmex project.
-   **Key Technologies/Tools**: Git, shell scripting, potentially Git hooks.
-   Refer to this module's main `README.md` (located at `../../git_operations/README.md`) for defined workflows and conventions.

## 2. Key Files & Structure in `git_operations` Module
When working within this module, pay close attention to:
-   `README.md`: Defines branching models, commit message conventions, PR guidelines, etc.
-   Git configuration files (e.g., `.gitattributes` if managed centrally, though often project root or module-specific).
-   Scripts for Git automation (e.g., custom Git commands, pre-commit hooks).
-   `docs/`: Detailed explanations of Git strategies, contribution workflows.

## 3. Standards & Practices for `git_operations`
-   **Consistency with `README.md`**: All scripts and configurations must align with the documented Git workflows in `git_operations/README.md` and the main project `CONTRIBUTING.md`.
-   **Commit Conventions**: If commit message linting or conventions (e.g., Conventional Commits) are defined, they must be followed.
-   **Branching Strategy**: Adhere to the specified branching model (e.g., GitFlow, GitHub Flow).
-   **Scripting**: Scripts for Git operations should be robust and clearly documented.

## 4. Testing in `git_operations`
-   Test any Git automation scripts thoroughly.
-   Manually verify that documented workflows are practical and effective.

## 5. Documentation for `git_operations`
-   The `README.md` and `docs/` in this module are crucial for guiding contributors on how to interact with the repository.
-   Clearly document commit message formats, PR procedures, and branching guidelines.

## 6. Specific Considerations for `git_operations`
-   **Pre-commit Hooks**: If pre-commit hooks are managed here, ensure they are lightweight and effective in enforcing standards (e.g., linting, running quick tests).
-   **Integration with CI/CD**: Consider how Git operations (e.g., tagging, branching) integrate with CI/CD pipelines.
-   This module defines *how* code is contributed and managed, so clarity and enforceability of its documented practices are key.

## 7. Final Check for `git_operations`
-   Ensure all documented Git workflows are clear, consistent, and align with project needs.
-   Verify that any automation scripts work correctly.
-   Confirm that `README.md` and `CONTRIBUTING.md` (project root) are consistent regarding Git practices. 