# Cursor Rules for the documentation Module

## 0. Preamble
These rules are specific to the `documentation` module and supplement the root `../../.cursor/.cursorrules` file. Always adhere to the root rules unless explicitly overridden here for a specific reason pertinent to this module.

## 1. Module Purpose & Context
-   **Core Functionality**: Manages the Docusaurus-based project documentation website. This includes configuration, content structure, styling, and build processes for the overall Codomyrmex documentation.
-   **Key Technologies/Tools**: Docusaurus, Markdown, MDX, React (for Docusaurus components), CSS, JavaScript (for Docusaurus configuration and customizations).
-   Refer to this module's `README.md` and the main project `README.md` for a comprehensive overview of the documentation strategy.

## 2. Key Files & Structure
When working within this module, pay close attention to:
-   `README.md`: Overview of the documentation module itself, setup, and contribution guidelines for documentation.
-   `docusaurus.config.js`: Main Docusaurus configuration file (site metadata, presets, plugins, theme).
-   `sidebars.js`: Defines the structure of the documentation sidebar navigation.
-   `src/`: Docusaurus-specific source files, including custom React components (`src/components/`), custom CSS (`src/css/custom.css`), and custom pages (`src/pages/`).
-   `docs/`: Root directory for Markdown documentation content. This directory contains sub-folders for project-level documentation and mirrors the structure for module-specific documentation that Docusaurus will serve.
    -   `docs/project/`: General project information, contribution guides, etc.
    -   `docs/modules/`: Contains documentation pulled or linked from individual Codomyrmex modules.
    -   `docs/tutorials/`: Project-wide tutorials.
-   `static/`: Static assets like images (`static/img/`) used in the documentation.
-   `package.json`: (If managing Docusaurus dependencies separately here, or points to root). Lists Docusaurus and related web dependencies.
-   `CHANGELOG.md`: All notable changes to the documentation structure, Docusaurus configuration, or build process must be logged here.
-   `SECURITY.md`: (Likely minimal for this module, but might cover aspects like ensuring no sensitive info is built into the static site if content is sourced from restricted places).

## 3. Coding Standards & Practices
-   **Docusaurus Best Practices**: Adhere to Docusaurus conventions for configuration, component creation, and content organization.
-   **Markdown/MDX**: Write clear, well-formatted, and valid Markdown/MDX. Use MDX features appropriately for enhanced content.
-   **React/JavaScript/CSS**: Follow standard web development best practices for any custom components or styling.
-   **Consistency**: Ensure a consistent style, tone, and terminology across all documentation.
-   **Links**: Verify all internal and external links are working. Use Docusaurus-recommended ways for linking between docs and static assets.
-   **Dependencies**:
    -   Any new Docusaurus plugins or web dependencies must be justified and added to the relevant `package.json`.

## 4. Testing (Documentation Build & Links)
-   **Local Build**: Regularly build the Docusaurus site locally (`npm run build` or `yarn build`) to catch errors.
-   **Serve Locally**: Run the local development server (`npm run start` or `yarn start`) to preview changes and test navigation.
-   **Link Checking**: Use tools or manual checks to ensure there are no broken links.
-   Consider automated link checking in a CI/CD pipeline if possible.

## 5. Documentation (Meta-Documentation for this Module)
-   Keep this module's `README.md` up-to-date with instructions on how to contribute to, build, and deploy the project documentation.
-   Document any custom Docusaurus components, swizzled components, or complex configurations within this module (e.g., in a `docs/development/` section of the `documentation` module itself).

## 6. Specific Considerations for `documentation`
-   **Content Sourcing**: Be aware of how documentation content from other modules is included or linked. Changes in other modules might require updates here (e.g., in `sidebars.js` or if using plugins to source docs).
-   **Build Process**: Understand the Docusaurus build process and how static HTML files are generated.
-   **Deployment**: Be familiar with how the documentation site is deployed (e.g., GitHub Pages, Netlify, Vercel).

## 7. Final Check for `documentation`
-   Before finalizing changes, ensure all documentation builds successfully without errors or warnings.
-   Verify that navigation, links, and styling appear as expected in a local preview.
-   Confirm that any changes to `docusaurus.config.js` or `sidebars.js` are correct and reflect the intended structure.
-   Update this module's `CHANGELOG.md` for any significant changes to the documentation infrastructure or overall structure. 