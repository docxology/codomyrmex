# Cursor Rules for the data_visualization Module

## 0. Preamble
These rules are specific to the `data_visualization` module and supplement `general.cursorrules`. Always adhere to `general.cursorrules` unless explicitly overridden here for a specific reason pertinent to this module.

## 1. Module Purpose & Context
-   **Core Functionality**: Offers static and interactive plotting capabilities. Enables visualization of data generated by or used within the Codomyrmex ecosystem.
-   **Key Technologies/Tools**: Plotting libraries (e.g., Matplotlib, Bokeh, Altair, Plotly.py), Python, potentially JavaScript for interactive elements.
-   Refer to the module's main `README.md` (located at `../../data_visualization/README.md`) for a comprehensive overview.

## 2. Key Files & Structure in `data_visualization` Module
When working within this module, pay close attention to:
-   `README.md`: Overview of visualization types and library usage.
-   `API_SPECIFICATION.md`: APIs for generating visualizations programmatically.
-   `MCP_TOOL_SPECIFICATION.md`: MCP tools for requesting visualizations.
-   `CHANGELOG.md`: New chart types, library updates.
-   `SECURITY.md`: Security of data handling and rendering (e.g., XSS in interactive charts).
-   `requirements.txt`: Dependencies like plotting libraries.
-   `docs/`: Examples, tutorials for creating different visualizations.
-   `src/` (or equivalent): Core plotting functions and data processing logic.
-   `tests/`: Tests for chart generation and data integrity.

## 3. Coding Standards & Practices for `data_visualization`
-   **Clarity of Visualizations**: Plots should be clear, well-labeled, and accurately represent the underlying data.
-   **Data Handling**: Ensure data is processed correctly for visualization. Be mindful of data privacy if handling sensitive information.
-   **Interactivity (if applicable)**: Interactive charts should be intuitive and performant.
-   **Customization**: Provide options for customizing plot appearance (colors, labels, titles).

## 4. Testing in `data_visualization`
-   Test generation of different chart types with various datasets.
-   For interactive charts, test user interactions.
-   Visual regression testing can be useful to catch unintended changes in plot appearance if tools are available.
-   Refer to `data_visualization/tests/README.md`.

## 5. Documentation for `data_visualization`
-   Provide clear examples for each supported plot type.
-   Document API parameters for data input and customization options.
-   Showcase how to integrate visualizations into other parts of Codomyrmex (e.g., documentation, UIs).

## 6. Specific Considerations for `data_visualization`
-   **Library Choice**: When adding new visualization types, choose appropriate libraries that integrate well with the existing stack.
-   **Output Formats**: Support common output formats (e.g., PNG, SVG, interactive HTML).
-   **Performance**: Be mindful of performance when visualizing large datasets.

## 7. Final Check for `data_visualization`
-   Ensure generated visualizations are accurate and easy to understand.
-   Verify all examples and documentation are up-to-date.
-   Check for any security concerns, especially with interactive HTML outputs. 