# General Cursor Rules for the Codomyrmex Project

## 0. Preamble
These are the general guiding principles for AI-assisted development across the entire Codomyrmex project. Module-specific rules (e.g., in `ai_code_editing.cursorrules`) may supplement or, in rare, justified cases, override these general rules. If a module-specific rule conflicts, it should explicitly state the rationale.

## 1. Core Principles
1.  **Understand Context**: Before any action, strive to understand the broader project goals (see root `README.md`) and the specific role of the module(s) you are working in.
2.  **Modularity & Cohesion**: Respect the modular architecture. Changes within one module should minimize impact on others. Ensure components within a module are cohesive.
3.  **Clarity & Readability**: Prioritize clear, concise, and well-documented code that is easily understandable by human developers. Follow Python PEP 8 where applicable, or established conventions for other languages.
4.  **Consistency**: Adhere to existing coding styles, naming conventions, and architectural patterns prevalent within the project and specific modules.
5.  **Functionality First**: Ensure all code is functional, robust, and achieves its intended purpose.
6.  **Testability**: Write code that is inherently testable. New features or significant changes require corresponding tests.
7.  **Security**: Maintain a security-conscious mindset. Refer to the root `SECURITY.md` and any module-specific `SECURITY.md` files.
8.  **Efficiency**: Aim for efficient code, but balance this with clarity and maintainability. Premature optimization should be avoided.
9.  **Documentation**: Keep all forms of documentation (READMEs, API specs, inline comments, changelogs) accurate and up-to-date with code changes.
10. **User-Focus**: For APIs, tools, and documentation, consider the end-user (developer, AI agent, or end-user of the Codomyrmex platform).

## 2. File Handling & Structure
1.  **Respect Existing Structure**: When modifying files, conform to their existing organization.
2.  **New Files**: Place new files in logically appropriate directories. Follow established naming conventions.
3.  **Standard Files**: Be aware of the purpose of standard files like `README.md`, `API_SPECIFICATION.md`, `MCP_TOOL_SPECIFICATION.md`, `CHANGELOG.md`, `SECURITY.md`, `requirements.txt` (or language equivalent), and `.gitignore`. Ensure they are maintained.
4.  **.cursorrules**: These files themselves are part of the project. They can be updated if requirements change, ideally with a clear rationale.

## 3. Coding Practices
1.  **Comments**: Comment complex logic, design rationales, and public APIs. Avoid over-commenting simple code. Use TODOs/FIXMEs judiciously with context.
2.  **Error Handling**: Implement comprehensive error handling. Use specific exceptions. Provide informative error messages. Log errors appropriately using the `logging_monitoring` module.
3.  **Dependencies**:
    *   Minimize new external dependencies. Justify their inclusion based on significant benefit.
    *   Update relevant requirements files (`requirements.txt`, `package.json`, etc.) with version pinning for stability.
4.  **Configuration**: Configuration should be clear, manageable, and externalized from code where appropriate (e.g., environment variables, config files). Avoid hardcoding sensitive information.
5.  **Language Best Practices**: Apply best practices for the specific programming language being used in a module.

## 4. Tool Usage (MCP & APIs)
1.  **Adherence to Specs**: When interacting with or defining tools via `MCP_TOOL_SPECIFICATION.md` or APIs via `API_SPECIFICATION.md`, strictly adhere to the defined schemas, parameters, and expected behaviors.
2.  **Clarity and Precision**: Inputs to tools should be clear and precise. Tool definitions must be unambiguous.

## 5. Testing
1.  **Comprehensive Testing**: Strive for thorough test coverage (unit, integration, and E2E where applicable).
2.  **Test Maintenance**: Keep tests up-to-date with code changes.
3.  **Test Execution**: Ensure all relevant tests pass before finalizing changes. Refer to module-specific `tests/README.md`.

## 6. Communication & Interaction (AI with User/Project)
1.  **Clarity of Intent**: Clearly state your objectives and the changes you propose.
2.  **Iterative Approach**: Prefer smaller, well-defined, incremental changes.
3.  **Information Gathering**: If unsure, ask clarifying questions or use provided tools to gather more context before acting.
4.  **Rationale for Changes**: Explain the reasoning behind significant or complex changes.
5.  **Feedback Incorporation**: Address user feedback thoughtfully.

## 7. Project-Wide Documents
When interacting with project-wide documents like the root `README.md`, `LICENSE`, `CONTRIBUTING.md`, or `CODE_OF_CONDUCT.md`, understand their broad scope and impact. Changes should be carefully considered. Specific rules for the root `README.md` can be found in `README.md.cursorrules`.

## 8. Review and Finalization
1.  **Self-Review**: Before concluding, review your changes against these general rules and any applicable module-specific rules.
2.  **Impact Assessment**: Briefly consider the potential impact of your changes on other parts of the project.
3.  **Changelog**: Update relevant `CHANGELOG.md` files for any significant modifications.

These general rules are designed to foster a high-quality, maintainable, and robust Codomyrmex codebase. 