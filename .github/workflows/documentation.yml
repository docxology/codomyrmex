name: Documentation Build and Deploy

on:
  push:
    branches: [main]
    paths:
      - 'src/codomyrmex/**/README.md'
      - 'src/codomyrmex/**/docs/**'
      - 'src/codomyrmex/**/CHANGELOG.md'
      - 'src/codomyrmex/**/API_SPECIFICATION.md'
      - 'src/codomyrmex/**/MCP_TOOL_SPECIFICATION.md'
      - 'src/codomyrmex/**/USAGE_EXAMPLES.md'
      - 'src/codomyrmex/documentation/**'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/codomyrmex/**/README.md'
      - 'src/codomyrmex/**/docs/**'
      - 'src/codomyrmex/**/CHANGELOG.md'
      - 'src/codomyrmex/**/API_SPECIFICATION.md'
      - 'src/codomyrmex/**/MCP_TOOL_SPECIFICATION.md'
      - 'src/codomyrmex/**/USAGE_EXAMPLES.md'
      - 'src/codomyrmex/documentation/**'
      - '.github/workflows/documentation.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    outputs:
      docs-changed: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for documentation changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] || [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "docs=true" >> $GITHUB_OUTPUT
          else
            # Check if documentation files have changed in PR
            if git diff --name-only origin/main...HEAD | grep -E "(README\.md|docs/|CHANGELOG\.md|API_SPECIFICATION\.md|MCP_TOOL_SPECIFICATION\.md|USAGE_EXAMPLES\.md|documentation/)" > /dev/null; then
              echo "docs=true" >> $GITHUB_OUTPUT
            else
              echo "docs=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "0.4.18"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Validate documentation structure
        run: |
          cd src/codomyrmex/documentation
          echo "üîç Validating documentation structure..."
          
          # Check for required documentation files in each module
          for module_dir in ../*/; do
            module_name=$(basename "$module_dir")
            echo "Checking module: $module_name"
            
            # Skip non-module directories
            if [[ "$module_name" == "documentation" || "$module_name" == "output" || "$module_name" == "template" || "$module_name" == "__pycache__" ]]; then
              continue
            fi
            
            # Check for required files
            if [[ ! -f "${module_dir}/README.md" ]]; then
              echo "‚ùå Missing README.md in $module_name"
              exit 1
            fi
            
            if [[ ! -f "${module_dir}/CHANGELOG.md" ]]; then
              echo "‚ö†Ô∏è  Warning: Missing CHANGELOG.md in $module_name"
            fi
            
            echo "‚úÖ $module_name structure validated"
          done

      - name: Run documentation validation
        run: |
          cd src/codomyrmex/documentation
          if [ -f "documentation_website.py" ]; then
            echo "üîç Running documentation validation..."
            uv run python documentation_website.py validate_docs || echo "Validation script not fully implemented yet"
          else
            echo "‚ö†Ô∏è  Documentation validation script not found, skipping"
          fi

      - name: Check documentation quality
        run: |
          echo "üîç Checking documentation quality..."
          
          # Check for broken relative links in markdown files
          find src/codomyrmex -name "*.md" -exec grep -l "\./" {} \; | while read -r file; do
            echo "Checking links in: $file"
            # Basic link validation - can be enhanced with a proper link checker
            grep -n "\.\/" "$file" | head -5 || true
          done

  aggregate-documentation:
    name: Aggregate Module Documentation
    runs-on: ubuntu-latest
    needs: validate-documentation
    if: needs.validate-documentation.outputs.docs-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "0.4.18"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Aggregate documentation
        run: |
          cd src/codomyrmex/documentation
          echo "üìö Aggregating module documentation..."
          
          # Create modules directory if it doesn't exist
          mkdir -p docs/modules
          
          # Copy documentation from each module
          for module_dir in ../*/; do
            module_name=$(basename "$module_dir")
            
            # Skip non-module directories
            if [[ "$module_name" == "documentation" || "$module_name" == "output" || "$module_name" == "template" || "$module_name" == "__pycache__" ]]; then
              continue
            fi
            
            echo "üìÑ Processing module: $module_name"
            
            # Create module directory in docs/modules
            mkdir -p "docs/modules/$module_name"
            
            # Copy main documentation files
            if [[ -f "${module_dir}/README.md" ]]; then
              cp "${module_dir}/README.md" "docs/modules/$module_name/"
            fi
            
            if [[ -f "${module_dir}/CHANGELOG.md" ]]; then
              cp "${module_dir}/CHANGELOG.md" "docs/modules/$module_name/"
            fi
            
            if [[ -f "${module_dir}/API_SPECIFICATION.md" ]]; then
              cp "${module_dir}/API_SPECIFICATION.md" "docs/modules/$module_name/"
            fi
            
            if [[ -f "${module_dir}/MCP_TOOL_SPECIFICATION.md" ]]; then
              cp "${module_dir}/MCP_TOOL_SPECIFICATION.md" "docs/modules/$module_name/"
            fi
            
            if [[ -f "${module_dir}/USAGE_EXAMPLES.md" ]]; then
              cp "${module_dir}/USAGE_EXAMPLES.md" "docs/modules/$module_name/"
            fi
            
            if [[ -f "${module_dir}/SECURITY.md" ]]; then
              cp "${module_dir}/SECURITY.md" "docs/modules/$module_name/"
            fi
            
            # Copy docs directory if it exists
            if [[ -d "${module_dir}/docs" ]]; then
              cp -r "${module_dir}/docs" "docs/modules/$module_name/"
            fi
            
            # Copy tests documentation if it exists
            if [[ -d "${module_dir}/tests" ]] && [[ -f "${module_dir}/tests/README.md" ]]; then
              mkdir -p "docs/modules/$module_name/tests"
              cp "${module_dir}/tests/README.md" "docs/modules/$module_name/tests/"
            fi
            
            echo "‚úÖ Completed processing: $module_name"
          done

      - name: Run custom aggregation script
        run: |
          cd src/codomyrmex/documentation
          if [ -f "documentation_website.py" ]; then
            echo "üîÑ Running custom aggregation script..."
            uv run python documentation_website.py aggregate_docs || echo "Custom aggregation not fully implemented"
          fi

      - name: Upload aggregated documentation
        uses: actions/upload-artifact@v4
        with:
          name: aggregated-docs
          path: src/codomyrmex/documentation/docs/

  build-documentation:
    name: Build Documentation Website
    runs-on: ubuntu-latest
    needs: [validate-documentation, aggregate-documentation]
    if: needs.validate-documentation.outputs.docs-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download aggregated documentation
        uses: actions/download-artifact@v4
        with:
          name: aggregated-docs
          path: src/codomyrmex/documentation/docs/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/codomyrmex/documentation/package.json

      - name: Install documentation dependencies
        run: |
          cd src/codomyrmex/documentation
          npm ci

      - name: Build documentation
        run: |
          cd src/codomyrmex/documentation
          echo "üèóÔ∏è  Building documentation website..."
          npm run build

      - name: Test documentation build
        run: |
          cd src/codomyrmex/documentation
          echo "üîç Testing documentation build..."
          
          # Check if build directory exists and contains files
          if [[ -d "build" ]] && [[ -n "$(ls -A build)" ]]; then
            echo "‚úÖ Documentation build successful"
            echo "üìä Build size: $(du -sh build | cut -f1)"
            echo "üìÅ Build contents:"
            ls -la build/ | head -10
          else
            echo "‚ùå Documentation build failed or empty"
            exit 1
          fi

      - name: Upload documentation build
        uses: actions/upload-artifact@v4
        with:
          name: documentation-build
          path: src/codomyrmex/documentation/build/

  deploy-documentation:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [validate-documentation, build-documentation]
    if: |
      github.ref == 'refs/heads/main' && 
      needs.validate-documentation.outputs.docs-changed == 'true' &&
      github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Download documentation build
        uses: actions/download-artifact@v4
        with:
          name: documentation-build
          path: ./build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  link-checker:
    name: Check Documentation Links
    runs-on: ubuntu-latest
    needs: build-documentation
    if: needs.validate-documentation.outputs.docs-changed == 'true'
    steps:
      - name: Download documentation build
        uses: actions/download-artifact@v4
        with:
          name: documentation-build
          path: ./build

      - name: Start local server
        run: |
          cd build
          python -m http.server 8000 &
          sleep 5

      - name: Install link checker
        run: |
          npm install -g @lhci/cli broken-link-checker

      - name: Check internal links
        run: |
          echo "üîó Checking documentation links..."
          blc http://localhost:8000 --recursive --exclude-external --filter-level 3 || true

      - name: Generate link report
        run: |
          echo "# Link Check Report" > link-report.md
          echo "" >> link-report.md
          echo "Checked at: $(date)" >> link-report.md
          echo "" >> link-report.md
          echo "Run completed. Check logs above for any broken links." >> link-report.md

      - name: Upload link check report
        uses: actions/upload-artifact@v4
        with:
          name: link-check-report
          path: link-report.md

  documentation-pr-preview:
    name: Documentation PR Preview
    runs-on: ubuntu-latest
    needs: build-documentation
    if: github.event_name == 'pull_request' && needs.validate-documentation.outputs.docs-changed == 'true'
    steps:
      - name: Download documentation build
        uses: actions/download-artifact@v4
        with:
          name: documentation-build
          path: ./build

      - name: Deploy PR Preview
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          destination_dir: pr-preview/pr-${{ github.event.number }}

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-preview/pr-${prNumber}/`;
            
            const comment = `## üìö Documentation Preview
            
            Your documentation changes are ready for review!
            
            üîó **Preview URL**: ${previewUrl}
            
            This preview will be updated automatically when you push new changes to this PR.
            `;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  documentation-status:
    name: Documentation Status
    runs-on: ubuntu-latest
    needs: [validate-documentation, aggregate-documentation, build-documentation]
    if: always()
    steps:
      - name: Check Documentation Status
        run: |
          echo "## Documentation Workflow Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate-documentation.result }}" == "success" ]]; then
            echo "‚úÖ **Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.aggregate-documentation.result }}" == "success" ]]; then
            echo "‚úÖ **Aggregation**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.aggregate-documentation.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è  **Aggregation**: Skipped (no doc changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Aggregation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-documentation.result }}" == "success" ]]; then
            echo "‚úÖ **Build**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-documentation.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è  **Build**: Skipped (no doc changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Docs Changed**: ${{ needs.validate-documentation.outputs.docs-changed }}" >> $GITHUB_STEP_SUMMARY

