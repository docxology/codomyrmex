[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "codomyrmex"
version = "0.1.0"
description = "A Modular, Extensible Coding Workspace"
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
authors = [
    {name = "Codomyrmex Contributors"}
]
maintainers = [
    {name = "Codomyrmex Contributors"}
]
keywords = ["coding", "workspace", "modular", "development", "AI", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]

dependencies = [
    # Core toolkit for code analysis and LLM integration
    "cased-kit",
    # For .env file support
    "python-dotenv",
    # LLM Providers
    "openai",
    "anthropic",
    "google-generativeai",
    # For semantic search and embedding
    "sentence-transformers",
    "chromadb",
    # For code execution sandbox
    "docker",
    # For schema validation (used in model_context_protocol)
    "jsonschema",
    # For static analysis
    "pylint",
    "flake8",
    "bandit",
    "radon",
    "lizard",
    # For data visualization
    "matplotlib",
    "seaborn",
    "numpy",
    # For git operations
    "GitPython",
    # For specific tutorials/recipes
    "unidiff",
    "requests",
    # For dependency graph visualization (optional)
    # "graphviz",  # Also requires Graphviz system package to be installed
    # For testing
    "pytest",
    "pytest-mock",
    "pytest-cov",
    # FastAPI - For creating API endpoints
    "fastapi",
    "uvicorn",
    "pydantic",
    # Loguru - For logging.
    "loguru",
    # Watchdog - For monitoring file system events.
    "watchdog",
    # Diff Match Patch - For generating and applying patches.
    "diff-match-patch",
    # Tiktoken - For tokenizing text with OpenAI models.
    "tiktoken",
    # For syntax highlighting (often a dependency for other tools)
    "Pygments",
    # For progress bars
    "tqdm",
    # Development tools
    "black",
    "mypy",
    "ruff",
]

[project.urls]
Homepage = "https://github.com/codomyrmex/codomyrmex"
Repository = "https://github.com/codomyrmex/codomyrmex"
Issues = "https://github.com/codomyrmex/codomyrmex/issues"
Documentation = "https://codomyrmex.readthedocs.io/"

[tool.hatch.build.targets.wheel]
packages = ["src/codomyrmex"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]

[tool.uv.sources]
codomyrmex = { workspace = true }

[project.scripts]
codomyrmex = "codomyrmex_cli:main"

[tool.pytest.ini_options]
testpaths = ["testing", "src"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--cov=src/codomyrmex",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["src/codomyrmex"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "cased.kit.*",
    "sentence_transformers.*",
    "chromadb.*",
    "docker.*",
    "matplotlib.*",
    "seaborn.*",
    "GitPython.*",
]
ignore_missing_imports = true
